# Form implementation generated from reading ui file 'spawn.ui'
#
# Created by: PyQt6 UI code generator 6.4.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
import re

import frida
from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtCore import Qt, pyqtSlot, QEvent
from PyQt6.QtWidgets import QMessageBox, QTextBrowser, QApplication


class Ui_SpawnDialogUi(object):
    def setupUi(self, SpawnDialogUi):
        SpawnDialogUi.setObjectName("SpawnDialogUi")
        SpawnDialogUi.resize(317, 435)
        font = QtGui.QFont()
        font.setFamily("Courier New")
        SpawnDialogUi.setFont(font)
        self.gridLayout = QtWidgets.QGridLayout(SpawnDialogUi)
        self.gridLayout.setObjectName("gridLayout")
        # self.appListBrowser = QtWidgets.QTextBrowser(SpawnDialogUi)
        self.appListBrowser = AppListBrowserClass(SpawnDialogUi)
        self.appListBrowser.setObjectName("appListBrowser")
        self.gridLayout.addWidget(self.appListBrowser, 1, 0, 1, 2)
        self.spawnBtn = QtWidgets.QPushButton(SpawnDialogUi)
        self.spawnBtn.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.spawnBtn.setObjectName("spawnBtn")
        self.gridLayout.addWidget(self.spawnBtn, 3, 1, 1, 1)
        self.spawnTargetIdInput = QtWidgets.QLineEdit(SpawnDialogUi)
        self.spawnTargetIdInput.setFocusPolicy(QtCore.Qt.FocusPolicy.StrongFocus)
        self.spawnTargetIdInput.setObjectName("spawnTargetIdInput")
        self.gridLayout.addWidget(self.spawnTargetIdInput, 3, 0, 1, 1)
        self.appListLabel = QtWidgets.QLabel(SpawnDialogUi)
        self.appListLabel.setObjectName("appListLabel")
        self.appListLabel.setIndent(2)
        self.gridLayout.addWidget(self.appListLabel, 0, 0, 1, 2)
        self.remoteAddrInput = QtWidgets.QLineEdit(SpawnDialogUi)
        self.remoteAddrInput.setEnabled(True)
        self.remoteAddrInput.setFocusPolicy(QtCore.Qt.FocusPolicy.StrongFocus)
        self.remoteAddrInput.setFrame(True)
        self.remoteAddrInput.setObjectName("remoteAddrInput")
        self.gridLayout.addWidget(self.remoteAddrInput, 2, 0, 1, 1)
        self.appListBtn = QtWidgets.QPushButton(SpawnDialogUi)
        self.appListBtn.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.appListBtn.setObjectName("appListBtn")
        self.gridLayout.addWidget(self.appListBtn, 2, 1, 1, 1)

        self.retranslateUi(SpawnDialogUi)
        QtCore.QMetaObject.connectSlotsByName(SpawnDialogUi)

    def retranslateUi(self, SpawnDialogUi):
        _translate = QtCore.QCoreApplication.translate
        SpawnDialogUi.setWindowTitle(_translate("SpawnDialogUi", "App List"))
        self.spawnBtn.setText(_translate("SpawnDialogUi", "Spawn"))
        self.spawnTargetIdInput.setPlaceholderText(_translate("SpawnDialogUi", "com.example.test"))
        self.appListLabel.setText(_translate("SpawnDialogUi", "Identifier           Name"))
        self.remoteAddrInput.setPlaceholderText(_translate("SpawnDialogUi", "IP:PORT"))
        self.appListBtn.setText(_translate("SpawnDialogUi", "List"))


class AppListBrowserClass(QTextBrowser):
    target_id_clicked_signal = QtCore.pyqtSignal(str)

    def __init__(self, args):
        super(AppListBrowserClass, self).__init__(args)

    def mousePressEvent(self, e: QtGui.QMouseEvent) -> None:
        super(AppListBrowserClass, self).mousePressEvent(e)
        pos = e.pos()
        tc = self.cursorForPosition(pos)
        self.target_id_clicked_signal.emit(tc.block().text())


class SpawnDialogClass(QtWidgets.QDialog):
    attach_target_name_signal = QtCore.pyqtSignal(str)
    spawn_target_id_signal = QtCore.pyqtSignal(str)

    def __init__(self):
        super(SpawnDialogClass, self).__init__()
        self.is_pid_list_checked = False
        self.application_list = None
        self.spawn_target_id = None
        self.spawn_dialog = QtWidgets.QDialog()
        self.spawn_dialog.setWindowFlags(Qt.WindowType.WindowStaysOnTopHint)
        # self.spawn_dialog.setWindowModality(Qt.WindowModality.ApplicationModal)
        self.spawn_ui = Ui_SpawnDialogUi()
        self.spawn_ui.setupUi(self.spawn_dialog)
        self.spawn_ui.remoteAddrInput.returnPressed.connect(self.get_app_list)
        self.spawn_ui.spawnTargetIdInput.returnPressed.connect(self.set_spawn_target)
        self.spawn_ui.spawnTargetIdInput.textChanged.connect(self.search_target)
        self.spawn_ui.spawnBtn.clicked.connect(self.spawn_launch)
        self.spawn_ui.appListBtn.clicked.connect(self.get_app_list)
        self.spawn_ui.appListBrowser.target_id_clicked_signal.connect(self.target_id_clicked_sig_func)
        self.spawn_dialog.show()

        self.interested_widgets = []
        QApplication.instance().installEventFilter(self)

    @pyqtSlot(str)
    def target_id_clicked_sig_func(self, sig: str):
        spawn_target_id_input = self.spawn_ui.spawnTargetIdInput
        spawn_target_id_input.setText(sig[sig.find("\t"):].strip()) if self.is_pid_list_checked else spawn_target_id_input.setText(sig[:sig.find("\t")])

    def set_spawn_target(self):
        self.spawn_target_id = self.spawn_ui.spawnTargetIdInput.text().strip()
        self.spawn_ui.spawnBtn.setFocus()

    def spawn_launch(self):
        if self.spawn_target_id is None:
            self.spawn_target_id = self.spawn_ui.spawnTargetIdInput.text().strip()
        btn_name = self.spawn_ui.spawnBtn.text()
        sig = self.spawn_target_id_signal if btn_name == "Spawn" else self.attach_target_name_signal
        sig.emit(self.spawn_target_id)

    def get_app_list(self):
        if self.spawn_ui.remoteAddrInput.isEnabled() is False:
            try:
                device = frida.get_usb_device(1)
            except Exception as e:
                print(e)
                return
        else:
            IP = self.spawn_ui.remoteAddrInput.text().strip()
            if re.search(r"^\d+\.\d+\.\d+\.\d+:\d+$", IP) is None:
                QMessageBox.information(self, "info", "Enter IP:PORT")
                return
            try:
                device = frida.get_device_manager().add_remote_device(IP)
            except Exception as e:
                print(e)
                return
        try:
            enumeration_function = device.enumerate_processes if self.is_pid_list_checked else device.enumerate_applications
            self.application_list = [app for app in enumeration_function()]
        except Exception as e:
            print(e)
            return

        app_list_text = ''
        for app in self.application_list:
            app_list_text += (str(app.pid) + '\t' + app.name + '\n') if self.is_pid_list_checked \
                else (app.identifier + '\t' + app.name + '\n')

        self.spawn_ui.appListBrowser.setText(app_list_text)

    def search_target(self):
        if self.application_list is None:
            return

        if len(self.application_list) > 0:
            app_list_text = ''
            for app in self.application_list:
                appid = str(app.pid) if self.is_pid_list_checked else app.identifier
                appname = app.name
                if appid.lower().find(self.spawn_ui.spawnTargetIdInput.text().lower()) != -1 or appname.lower().find(self.spawn_ui.spawnTargetIdInput.text().lower()) != -1:
                    app_list_text += appid + '\t' + appname + '\n'
            self.spawn_ui.appListBrowser.setText(app_list_text)

    def eventFilter(self, obj, event):
        self.interested_widgets = [self.spawn_ui.spawnTargetIdInput]
        if event.type() == QEvent.Type.KeyPress and event.key() == Qt.Key.Key_Tab:
            try:
                if self.spawn_ui.remoteAddrInput.isEnabled():
                    self.interested_widgets.append(self.spawn_ui.remoteAddrInput)
                index = self.interested_widgets.index(self.spawn_dialog.focusWidget())

                self.interested_widgets[(index + 1) % len(self.interested_widgets)].setFocus()
            except ValueError:
                self.interested_widgets[0].setFocus()

            return True

        return super().eventFilter(obj, event)
