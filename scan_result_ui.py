# Form implementation generated from reading ui file 'scan_result.ui'
#
# Created by: PyQt6 UI code generator 6.4.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
import inspect

from PyQt6 import QtCore, QtWidgets, QtGui
from PyQt6.QtCore import pyqtSlot, Qt, QEvent
from PyQt6.QtGui import QShortcut, QKeySequence
from PyQt6.QtWidgets import QTableWidget, QApplication, QMenu, QHBoxLayout, QLabel, QComboBox, QLineEdit, QPushButton, \
    QVBoxLayout, QWidget

import gvar
import misc
import watchpoint


class MemPatchWidget(QWidget):
    def __init__(self):
        super(MemPatchWidget, self).__init__()
        self.setWindowTitle("Memory Patch")
        self.resize(550, 100)

        self.main_layout = QVBoxLayout(self)

        self.buttons_layout = QHBoxLayout()
        self.clear_button = QPushButton("Clear")
        self.clear_button.clicked.connect(self.clear_contents)
        self.apply_all_button = QPushButton("Apply All")
        self.apply_all_button.clicked.connect(self.apply_patch_all)

        self.buttons_layout.addWidget(self.clear_button)
        self.buttons_layout.addWidget(self.apply_all_button)

        self.main_layout.addLayout(self.buttons_layout)

        self.rows_container = QWidget()
        self.rows_layout = QVBoxLayout(self.rows_container)
        self.rows_layout.setSpacing(5)  # Adjust the spacing to your preference

        self.main_layout.addWidget(self.rows_container)

        self.rows = []
        self.patch_target_addresses = []

    def keyPressEvent(self, event):
        if event.key() == Qt.Key.Key_Escape:
            self.close()
        else:
            super().keyPressEvent(event)

    def add_row(self, addresses):
        for address in addresses:
            if address not in self.patch_target_addresses:
                row_layout = QHBoxLayout()
                label = QLabel(f"{address}")
                label.setMinimumSize(QtCore.QSize(100, 26))
                label.setTextInteractionFlags(Qt.TextInteractionFlag.TextSelectableByMouse)
                combobox = QComboBox()
                combobox.setMinimumSize(QtCore.QSize(100, 26))
                combobox.addItems(["writeU8", "writeU16", "writeU32", "writeU64", "writeInt",
                                   "writeFloat", "writeDouble", "writeUtf8String", "writeByteArray"])
                lineedit = QLineEdit()
                lineedit.setMinimumSize(QtCore.QSize(150, 26))
                apply_button = QPushButton("Apply")
                apply_button.setMinimumSize(QtCore.QSize(50, 26))
                row_layout.addWidget(label)
                row_layout.addWidget(combobox)
                row_layout.addWidget(lineedit)
                row_layout.addWidget(apply_button)
                lineedit.returnPressed.connect(lambda lbl=label, cb=combobox, le=lineedit: self.apply_patch(lbl, cb, le))
                apply_button.clicked.connect(lambda _, lbl=label, cb=combobox, le=lineedit: self.apply_patch(lbl, cb, le))

                self.rows_layout.addLayout(row_layout)
                self.rows.append((label, combobox, lineedit, row_layout))
                self.patch_target_addresses.append(label.text())

    def apply_patch(self, label, combobox, lineedit):
        # Retrieve and print data from this specific row
        label_text = label.text()
        combobox_text = combobox.currentText()
        lineedit_text = lineedit.text()
        mem_patch_value = misc.mem_patch_value_check_up(combobox_text, lineedit_text)
        if 'Error' in mem_patch_value:
            print(f"[scan_result_ui][apply_patch] mem patch value check up failed")
            return
        if combobox_text == 'writeFloat' or combobox_text == 'writeDouble':
            mem_patch_value = float(mem_patch_value)
        elif combobox_text == 'writeU8' or combobox_text == 'writeU16' or \
                combobox_text == 'writeU32' or combobox_text == 'writeU64' or combobox_text == 'writeInt':
            mem_patch_value = int(mem_patch_value)
        try:
            gvar.frida_instrument.mem_patch(label_text, mem_patch_value, combobox_text)
        except Exception as e:
            print(f"[scan_result_ui]{inspect.currentframe().f_code.co_name}: {e}")

    def apply_patch_all(self):
        for label, combobox, lineedit, _ in self.rows:
            self.apply_patch(label, combobox, lineedit)

    def clear_contents(self):
        # Remove all rows from the layout and clear the rows list
        while self.rows:
            _, _, _, row_layout = self.rows.pop()
            # Remove each row layout from the parent layout
            for i in reversed(range(row_layout.count())):
                widget = row_layout.itemAt(i).widget()
                if widget:
                    widget.deleteLater()
            self.rows_layout.removeItem(row_layout)
        self.patch_target_addresses.clear()
        self.resize(550, 100)


class MemScanResultTableWidget(QTableWidget):
    set_watchpoint_menu_clicked_signal = QtCore.pyqtSignal(list)

    def __init__(self, args):
        super(MemScanResultTableWidget, self).__init__(args)

        self.mem_patch_widget = MemPatchWidget()
        self.mem_patch_widget.setWindowFlags(Qt.WindowType.WindowStaysOnTopHint)
        self.watch_point_widget = watchpoint.WatchPointWidget()

        # Set up the shortcut for Cmd+C or Ctrl+C
        copy_shortcut = QShortcut(QKeySequence("Ctrl+C"), self)
        copy_shortcut.activated.connect(self.copy_selected_items)

    def contextMenuEvent(self, event: QtGui.QContextMenuEvent):
        item = self.itemAt(event.pos())
        if item is not None and item.column() == 0:
            context_menu = QMenu(self)
            action1 = context_menu.addAction("Patch")
            action2 = context_menu.addAction("Set watchpoint")
            action = context_menu.exec(event.globalPos())
            selected_items = [item.text() for item in self.selectedItems()]
            if action == action1:
                self.mem_patch_menu_clicked(selected_items)
            if action == action2:
                self.set_watchpoint_menu_clicked(selected_items[0])

    def mem_patch_menu_clicked(self, address_list):
        self.mem_patch_widget.add_row(address_list)
        self.mem_patch_widget.show()

    def set_watchpoint_menu_clicked(self, addr):
        self.watch_point_widget.watch_point_ui.watchpointAddrInput.setText(addr)
        self.watch_point_widget.show()

    def copy_selected_items(self):
        # Get selected items
        selected_items = self.selectedItems()

        # Group items by row for copying in table format
        rows = {}
        for item in selected_items:
            row = item.row()
            if row not in rows:
                rows[row] = []
            rows[row].append(item.text())

        # Sort rows by their keys (row number) and create formatted text
        copied_text = "\n".join(
            "\t".join(rows[row]) for row in sorted(rows.keys())
        )

        # Copy to clipboard
        clipboard = QApplication.clipboard()
        clipboard.setText(copied_text)


class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(545, 619)
        self.gridLayout = QtWidgets.QGridLayout(Form)
        self.gridLayout.setObjectName("gridLayout")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setContentsMargins(-1, 0, -1, 0)
        self.horizontalLayout_4.setSpacing(7)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.startScanBtn = QtWidgets.QPushButton(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.startScanBtn.sizePolicy().hasHeightForWidth())
        self.startScanBtn.setSizePolicy(sizePolicy)
        self.startScanBtn.setMinimumSize(QtCore.QSize(0, 0))
        self.startScanBtn.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.startScanBtn.setObjectName("startScanBtn")
        self.horizontalLayout_4.addWidget(self.startScanBtn)
        self.nextScanBtn = QtWidgets.QPushButton(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.nextScanBtn.sizePolicy().hasHeightForWidth())
        self.nextScanBtn.setSizePolicy(sizePolicy)
        self.nextScanBtn.setMinimumSize(QtCore.QSize(75, 0))
        self.nextScanBtn.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.nextScanBtn.setObjectName("nextScanBtn")
        self.horizontalLayout_4.addWidget(self.nextScanBtn)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem1)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem2)
        self.stopScanBtn = QtWidgets.QPushButton(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.stopScanBtn.sizePolicy().hasHeightForWidth())
        self.stopScanBtn.setSizePolicy(sizePolicy)
        self.stopScanBtn.setMinimumSize(QtCore.QSize(75, 0))
        self.stopScanBtn.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.stopScanBtn.setObjectName("stopScanBtn")
        self.horizontalLayout_4.addWidget(self.stopScanBtn)
        self.gridLayout.addLayout(self.horizontalLayout_4, 0, 0, 1, 1)
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setContentsMargins(-1, 0, -1, 0)
        self.horizontalLayout_6.setSpacing(7)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.scanMatchFoundLabel = QtWidgets.QLabel(Form)
        self.scanMatchFoundLabel.setText("")
        self.scanMatchFoundLabel.setObjectName("scanMatchFoundLabel")
        self.horizontalLayout_6.addWidget(self.scanMatchFoundLabel)
        self.scanPercentProgressLabel = QtWidgets.QLabel(Form)
        self.scanPercentProgressLabel.setText("")
        self.scanPercentProgressLabel.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.scanPercentProgressLabel.setObjectName("scanPercentProgressLabel")
        self.horizontalLayout_6.addWidget(self.scanPercentProgressLabel)
        self.gridLayout.addLayout(self.horizontalLayout_6, 4, 0, 1, 1)
        # self.memScanResultTableWidget = QtWidgets.QTableWidget(Form)
        self.memScanResultTableWidget = MemScanResultTableWidget(Form)
        self.memScanResultTableWidget.setObjectName("memScanResultTableWidget")
        self.memScanResultTableWidget.setColumnCount(7)
        self.memScanResultTableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.memScanResultTableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.memScanResultTableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.memScanResultTableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.memScanResultTableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.memScanResultTableWidget.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.memScanResultTableWidget.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.memScanResultTableWidget.setHorizontalHeaderItem(6, item)
        self.gridLayout.addWidget(self.memScanResultTableWidget, 5, 0, 1, 1)
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_7.setContentsMargins(-1, 0, -1, 0)
        self.horizontalLayout_7.setSpacing(7)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.label_11 = QtWidgets.QLabel(Form)
        self.label_11.setMinimumSize(QtCore.QSize(90, 0))
        self.label_11.setMaximumSize(QtCore.QSize(120, 16777215))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.label_11.setFont(font)
        self.label_11.setObjectName("label_11")
        self.horizontalLayout_7.addWidget(self.label_11)
        self.memScanExcludePath = QtWidgets.QTextEdit(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(self.memScanExcludePath.sizePolicy().hasHeightForWidth())
        self.memScanExcludePath.setSizePolicy(sizePolicy)
        self.memScanExcludePath.setMinimumSize(QtCore.QSize(190, 30))
        self.memScanExcludePath.setMaximumSize(QtCore.QSize(16777215, 30))
        self.memScanExcludePath.setFocusPolicy(QtCore.Qt.FocusPolicy.StrongFocus)
        self.memScanExcludePath.setTabChangesFocus(True)
        self.memScanExcludePath.setAcceptRichText(False)
        self.memScanExcludePath.setObjectName("memScanExcludePath")
        self.horizontalLayout_7.addWidget(self.memScanExcludePath)
        self.gridLayout.addLayout(self.horizontalLayout_7, 1, 0, 1, 1)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Scan Result"))
        self.startScanBtn.setText(_translate("Form", "First Scan"))
        self.nextScanBtn.setText(_translate("Form", "Next Scan"))
        self.stopScanBtn.setText(_translate("Form", "Stop Scan"))
        item = self.memScanResultTableWidget.horizontalHeaderItem(0)
        item.setText(_translate("Form", "Address"))
        item = self.memScanResultTableWidget.horizontalHeaderItem(1)
        item.setText(_translate("Form", "Value"))
        item = self.memScanResultTableWidget.horizontalHeaderItem(2)
        item.setText(_translate("Form", "First Scan"))
        item = self.memScanResultTableWidget.horizontalHeaderItem(3)
        item.setText(_translate("Form", "-"))
        item = self.memScanResultTableWidget.horizontalHeaderItem(4)
        item.setText(_translate("Form", "-"))
        item = self.memScanResultTableWidget.horizontalHeaderItem(5)
        item.setText(_translate("Form", "-"))
        item = self.memScanResultTableWidget.horizontalHeaderItem(6)
        item.setText(_translate("Form", "-"))
        self.label_11.setText(_translate("Form", "Exclude Path:"))
        self.memScanExcludePath.setPlaceholderText(_translate("Form", "e.g., \\/system\\/|\\/dev\\/"))